// <auto-generated />
using System;
using JA.Classes;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JA.Migrations
{
    [DbContext(typeof(AplicationContext))]
    [Migration("20250517014249_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("JA.Classes.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Company_name")
                        .HasColumnType("TEXT")
                        .HasColumnName("Company_name");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT")
                        .HasColumnName("Country");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<string>("Experience")
                        .HasColumnType("TEXT")
                        .HasColumnName("Experience");

                    b.Property<int?>("Id_Company")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id_Company");

                    b.Property<int?>("Userid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Vacation_Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("Vacation_Name");

                    b.Property<int?>("Wage")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Wage");

                    b.HasKey("Id");

                    b.HasIndex("Id_Company");

                    b.HasIndex("Userid");

                    b.ToTable("Applications", (string)null);
                });

            modelBuilder.Entity("JA.Classes.Companys_data", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discription")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companys_data");
                });

            modelBuilder.Entity("JA.Classes.PersonalData", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("About")
                        .HasColumnType("TEXT");

                    b.Property<string>("Age")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("Education")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("BLOB");

                    b.Property<string>("Speciality")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users_data");
                });

            modelBuilder.Entity("JA.Classes.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApplicantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VacancyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("VacancyId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("JA.Classes.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("admin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("isSercher")
                        .HasColumnType("INTEGER");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JA.Classes.Application", b =>
                {
                    b.HasOne("JA.Classes.Companys_data", "Companys_data")
                        .WithMany("Applications")
                        .HasForeignKey("Id_Company");

                    b.HasOne("JA.Classes.User", null)
                        .WithMany("Applications")
                        .HasForeignKey("Userid");

                    b.Navigation("Companys_data");
                });

            modelBuilder.Entity("JA.Classes.Companys_data", b =>
                {
                    b.HasOne("JA.Classes.User", "User")
                        .WithOne("Companys_data")
                        .HasForeignKey("JA.Classes.Companys_data", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JA.Classes.PersonalData", b =>
                {
                    b.HasOne("JA.Classes.User", "User")
                        .WithOne("Users_data")
                        .HasForeignKey("JA.Classes.PersonalData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JA.Classes.Response", b =>
                {
                    b.HasOne("JA.Classes.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JA.Classes.Application", "Application")
                        .WithMany("Responses")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JA.Classes.Application", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("JA.Classes.Companys_data", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("JA.Classes.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Companys_data")
                        .IsRequired();

                    b.Navigation("Responses");

                    b.Navigation("Users_data")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
